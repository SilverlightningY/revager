<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?eclipse.ant.import?>
<project basedir="." default="release" name="RevAger">

	<property file="src/neos/resi/resources/appResources.properties" />

	<property environment="env" />
	<property name="debuglevel" value="source,lines,vars" />
	<property name="target" value="1.6" />
	<property name="source" value="1.6" />

	<!-- Application name -->
    <property name="app.name" value="RevAger"/>

	<property name="dir.src" location="src" />
	<property name="dir.lib" location="lib" />
	<property name="dir.lib.dev" location="lib-dev" />
	<property name="dir.build" location="build" />
	<property name="dir.dist" location="dist" />
	<property name="dir.build.test" location="${dir.build}/neos/resi/test" />
   
	<!-- Directory where DMG images can be temporarily mounted -->
    <property name="dir.build.dmg.mount" value="/tmp"/>
	<!-- DMG background image -->
	<property name="file.build.dmg.background" value="${dir.src}/neos/resi/resources/build/macosx/dmg_background.png" />
	<!-- Applescript to layout DMG window -->
	<property name="file.build.dmg.layoutscript" value="${dir.src}/neos/resi/resources/build/macosx/dmg_setlayout.applescript" />
	

	<property name="lib.derby" location="${dir.lib}/derby.jar" />
	<property name="lib.iText" location="${dir.lib}/iText-2.1.7.jar" />
	<property name="lib.junit" location="${dir.lib.dev}/junit-4.7.jar" />
	<property name="lib.launch4j.linux" location="${dir.lib.dev}/launch4j/launch4j-3.0.1-linux.tgz" />
	<property name="lib.launch4j.windows" location="${dir.lib.dev}/launch4j/launch4j-3.0.1-win32.zip" />
	<property name="lib.launch4j.macosx" location="${dir.lib.dev}/launch4j/launch4j-3.0.1-macosx.tgz" />
	<property name="lib.launch4j.solaris" location="${dir.lib.dev}/launch4j/launch4j-3.0.1-solaris-sparc.tgz" />

	<path id="RevAger.classpath">
		<pathelement location="${lib.build}" />
		<pathelement location="${lib.derby}" />
		<pathelement location="${lib.iText}" />
		<pathelement location="${lib.junit}" />
	</path>

	<!--                                          -->
	<!-- Some conditions to detect the current OS -->
	<!--                                          -->
	<condition property="isSolaris">
		<or>
			<os name="SunOS" />
			<os name="Solaris" />
		</or>
	</condition>

	<condition property="isWindows">
		<or>
			<os name="Windows 2000" />
			<os name="Windows XP" />
			<os name="Windows 2003" />
			<os name="Windows Vista" />
			<os name="Windows 7" />
		</or>
	</condition>

	<condition property="isLinux">
		<os name="Linux" />
	</condition>

	<condition property="isMacOSX">
		<os name="Mac OS X" />
	</condition>

	<condition property="isLaunch4jAvailable">
		<available file="${dir.lib.dev}/launch4j/launch4j" />
	</condition>

	<!--             -->
	<!-- The targets -->
	<!--             -->
	<target name="init">
		<mkdir dir="${dir.build}" />
		<copy includeemptydirs="false" todir="${dir.build}">
			<fileset dir="${dir.src}">
				<exclude name="**/*.launch" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="clean">
		<delete dir="${dir.build}" />
		<delete dir="${dir.dist}" />
		<delete dir="${dir.lib.dev}/launch4j/launch4j" />
	</target>

	<target depends="clean" name="cleanall" />

	<target depends="build-subprojects,build-project" name="build" />

	<target name="build-subprojects" />

	<target depends="init" name="build-project">
		<echo message="${ant.project.name}: ${ant.file}" />
		<javac debug="true" debuglevel="${debuglevel}" destdir="${dir.build}" source="${source}" target="${target}">
			<src path="${dir.src}" />
			<classpath refid="RevAger.classpath" />
		</javac>
	</target>


	<target name="unzip-libs">
		<echo> Unzip 3rd-party libs from ${lib} directory into ${build}</echo>
		<unzip dest="${dir.build}">
			<fileset dir="${dir.lib}">
				<include name="**/*.jar" />
			</fileset>
		</unzip>
	</target>


	<target name="remove-tests">
		<delete dir="${dir.build.test}" />
	</target>


	<target name="dist" depends="unzip-libs,build,remove-tests" description="generate the distribution">
		<mkdir dir="${dir.dist}" />

		<!-- Build the runnable JAR file -->
		<jar jarfile="${dir.dist}/revager_${appVersion}.jar" basedir="${dir.build}" level="9">
			<manifest>
				<attribute name="Main-Class" value="neos.resi.Main" />
				<attribute name="Class-Path" value="." />
				<attribute name="Implementation-Title" value="${appName}" />
				<attribute name="Implementation-Version" value="${appVersion} (Build ${appBuild})" />
				<attribute name="Implementation-Vendor" value="Team N.E.O.S." />
				<attribute name="SplashScreen-Image" value="neos/resi/resources/splashScreen.gif" />
			</manifest>
		</jar>

		<!-- Build the ZIP file with the source code inside -->
		<zip destfile="${dir.dist}/revager-src_${appVersion}.zip" basedir="src" level="9" />
	</target>

	<!-- Platform-dependent targets to perpare Launch4j -->
	<target name="prepare-launch4j-unix">
		<untar src="${dir.lib.dev}/launch4j/l4j.tar" dest="${dir.lib.dev}/launch4j" />

		<delete file="${dir.lib.dev}/launch4j/l4j.tar" />

		<chmod perm="a+rwx">
			<fileset dir="${dir.lib.dev}/launch4j/launch4j">
				<include name="**/*" />
			</fileset>
		</chmod>
	</target>

	<target name="prepare-launch4j-linux" if="isLinux">
		<gunzip src="${lib.launch4j.linux}" dest="${dir.lib.dev}/launch4j/l4j.tar" />
		<antcall target="prepare-launch4j-unix" />
	</target>

	<target name="prepare-launch4j-solaris" if="isSolaris">
		<gunzip src="${lib.launch4j.solaris}" dest="${dir.lib.dev}/launch4j/l4j.tar" />
		<antcall target="prepare-launch4j-unix" />
	</target>

	<target name="prepare-launch4j-macosx" if="isMacOSX">
		<gunzip src="${lib.launch4j.macosx}" dest="${dir.lib.dev}/launch4j/l4j.tar" />
		<antcall target="prepare-launch4j-unix" />
	</target>

	<target name="prepare-launch4j-windows" if="isWindows">
		<unzip src="${lib.launch4j.windows}" dest="${dir.lib.dev}/launch4j" />
	</target>


	<target name="prepare-launch4j">
		<!-- Remove old Launch4j library if there is one -->
		<delete dir="${dir.lib.dev}/launch4j/launch4j" />

		<antcall target="prepare-launch4j-linux" />
		<antcall target="prepare-launch4j-windows" />
		<antcall target="prepare-launch4j-macosx" />
		<antcall target="prepare-launch4j-solaris" />
	</target>


	<target name="build-launch4j" if="isLaunch4jAvailable" description="generate runnable .exe file for MS Windows">
		<property name="dir.launch4j" location="${dir.lib.dev}/launch4j/launch4j" />
		<property name="conf.launch4j" location="launch4j-revager.xml" />
		<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${dir.launch4j}/launch4j.jar
		        :${dir.launch4j}/lib/xstream.jar" />

		<launch4j configFile="${conf.launch4j}" jar="${dir.dist}/revager_${appVersion}.jar" outfile="${dir.dist}/revager_${appVersion}.exe" />
	</target>


	<target name="build-jarbundler" if="isMacOSX" description="generate runnable app file for Mac OS X">
		<taskdef name="jarbundler" classname="net.sourceforge.jarbundler.JarBundler" classpath="${dir.lib.dev}/jarbundler-2.1.0.jar" />

		<jarbundler dir="${dir.dist}" name="${app.name}" mainclass="neos.resi.Main" jar="${dir.dist}/revager_${appVersion}.jar" build="${appBuild}" version="${appVersion}" bundleid="neos.resi" icon="${dir.build}/neos/resi/gui/icons/frameIcon_128x128.icns" jvmversion="1.6+" shortname="${app.name}" />
	</target>

	<!-- MacOS X DMG build script adapted from Romain Kuntz (http://www.rkuntz.org/pmwiki.php?n=Code.AntDiskImage) -->
	<target name="build-dmg" if="isMacOSX" description="build DMG image for MacOS X (requires hidutil, thus only works on MacOS X)">
		
	    <!-- Delete previously created DMG -->
	    <delete file="${dir.dist}/${app.name}.dmg" verbose="true" failonerror="false"/>

	    <!-- Create a temporary disk image -->
	    <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
	      <arg value="create"/>
	      <arg value="-srcfolder"/>
	      <arg value="${dir.dist}/${app.name}.app"/>
	      <arg value="-volname"/>
	      <arg value="${app.name}"/>
	      <arg value="-ov"/>
	      <arg value="${dir.dist}/${app.name}-tmp.dmg"/>
	      <arg value="-format"/>
	      <arg value="UDRW"/>
		  <arg value="-nospotlight"/>
	    </exec>

	    <!-- Attach the temporary image -->
	    <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
	      <arg value="attach"/>
	      <arg value="${dir.dist}/${app.name}-tmp.dmg"/>
	      <arg value="-mountroot"/>
	      <arg value="${dir.build.dmg.mount}/"/>
	    </exec>

	    <!-- Copy the background file -->
	    <mkdir dir="${dir.build.dmg.mount}/${app.name}/.background"/>
	    <copy file="${file.build.dmg.background}" tofile="${dir.build.dmg.mount}/${app.name}/.background/background.png" overwrite="true"/>

		<!-- Layout Finder window (Set size, set background, arrange icons etc.) -->
		<exec executable="/usr/bin/osascript" os="Mac OS X">
			<arg value="${file.build.dmg.layoutscript}" />
		</exec>
		
	    <!-- Detach the temporary image -->
	    <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
	      <arg value="detach"/>
	      <arg value="${dir.build.dmg.mount}/${app.name}"/>
	    </exec>

	    <!-- Compress it to a new image -->
	    <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
	      <arg value="convert"/>
	      <arg value="${dir.dist}/${app.name}-tmp.dmg"/>
	      <arg value="-format"/>
	      <arg value="UDZO"/>
	      <arg value="-o"/>
	      <arg value="${dir.dist}/${app.name}.dmg"/>
	    </exec>

	    <!-- Delete the temporary image -->
	    <delete file="${dir.dist}/${app.name}-tmp.dmg"  verbose="true" failonerror="false"/>

	</target>
	
	<target name="release" description="generate a full release">
		<antcall target="dist" />

		<antcall target="prepare-launch4j" />
		<antcall target="build-launch4j" />

		<antcall target="build-jarbundler" />
		<antcall target="build-dmg"/>
	</target>

</project>